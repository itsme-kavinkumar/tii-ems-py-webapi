07/08/2024 09:29:56 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 09:29:56 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 09:29:56 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 09:29:56 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mc.company_id AS group_id ,
                mc.company_code AS group_code ,
                mc.company_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.company_id  
                order by   mm.company_id 
                
            
07/08/2024 09:29:57 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 09:29:57 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mb.bu_id AS group_id ,
                mb.bu_code AS group_code ,
                mb.bu_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.bu_id  
                order by   mm.bu_id 
                
            
07/08/2024 09:29:57 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 09:29:57 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.plant_id AS group_id, 
                md.plant_code AS group_code ,
                md.plant_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.plant_id  
                order by   md.plant_order 
                
            
07/08/2024 09:29:57 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 09:29:57 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:09:39 UserCount.... [(4, 'AIC_FAPI_EP')]
07/08/2024 10:09:39 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:09:40 UserCount.... [(5, 'AIC_FAPI_EP')]
07/08/2024 10:09:40 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:09:41 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:09:41 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mc.company_id AS group_id ,
                mc.company_code AS group_code ,
                mc.company_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.company_id  
                order by   mm.company_id 
                
            
07/08/2024 10:09:42 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:09:42 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mb.bu_id AS group_id ,
                mb.bu_code AS group_code ,
                mb.bu_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.bu_id  
                order by   mm.bu_id 
                
            
07/08/2024 10:09:42 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:09:42 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.plant_id AS group_id, 
                md.plant_code AS group_code ,
                md.plant_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.plant_id  
                order by   md.plant_order 
                
            
07/08/2024 10:09:42 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:09:42 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:21:16 UserCount.... [(4, 'AIC_FAPI_EP')]
07/08/2024 10:21:16 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:21:16 UserCount.... [(2, 'AIC_FAPI_EP')]
07/08/2024 10:21:17 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mc.company_id AS group_id ,
                mc.company_code AS group_code ,
                mc.company_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.company_id  
                order by   mm.company_id 
                
            
07/08/2024 10:21:17 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:21:17 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                mb.bu_id AS group_id ,
                mb.bu_code AS group_code ,
                mb.bu_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.bu_id  
                order by   mm.bu_id 
                
            
07/08/2024 10:21:17 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:21:17 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.plant_id AS group_id, 
                md.plant_code AS group_code ,
                md.plant_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                                        
                group by   mm.plant_id  
                order by   md.plant_order 
                
            
07/08/2024 10:21:18 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:21:18 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
07/08/2024 10:57:34 UserCount.... [(1, 'AIC_FAPI_EP')]
07/08/2024 10:57:35 equipment query 
            SELECT                       
                mc.company_code,
                mc.company_name,
                mb.bu_code,
                mb.bu_name,
                md.plant_code,
                md.plant_name,
                mcs.campus_name,
                mpd.plant_department_code,
                mpd.plant_department_name,
                ifnull(mmt.equipment_group_code,'') equipment_group_code,
                ifnull(mmt.equipment_group_name,'') equipment_group_name,
                ifnull(me.equipment_code,'') equipment_code,
                
                ifnull(case when mm.equipment_id <> 0 then me.equipment_name else mm.other_equipment_name end,'') as equipment_name,
                
                ifnull(mf.function_name,'') function_name,
                ifnull(mf.function_code,'') function_code,
                mm.meter_code,
                mm.meter_name,
                count(DISTINCT mm.meter_code) AS meter_count,
                COUNT(DISTINCT CASE WHEN mm.meter_type = 'Primary' THEN mm.meter_code END) AS pm_meter_count,
                cp.power_id,
                mm.company_id,
                mm.bu_id,
                mm.plant_id,
                md.campus_id,
                mm.plant_department_id,
                mm.equipment_group_id ,
                ifnull(me.equipment_id,0) equipment_id,
                ifnull(mf.function_id,0)function_id,
                ifnull(me.equipment_class_id,0) equipment_class_id,
                ifnull(ecls.equipment_class_code,'') equipment_class_code,
                cp.meter_id,
                cp.design_id,
                cp.beam_id,
                cp.date_time,
                cp.date_time1,
                cp.mill_date,
                cp.mill_shift,
                cp.meter_status_code,
                mm.meter_type,
                 '' as meter_formula,
                GROUP_CONCAT(DISTINCT me.equipment_id) AS equipment_ids,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg_thd * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg_thd / mmf.vln_avg_value else cp.vln_avg_thd end ),prf.vln_avg) AS vln_avg_thd,
                ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value when  mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end ),prf.vln_avg) AS vln_avg,
                ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value when  mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end ),prf.r_volt) AS r_volt,
                ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value when  mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end ),prf.y_volt) AS y_volt,
                ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value when  mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end ),prf.b_volt) AS b_volt,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end ),prf.vll_avg) AS vll_avg,
                ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg_thd * mmf.vll_avg_value when  mmf.vll_avg = '/' then cp.vll_avg_thd / mmf.vll_avg_value else cp.vll_avg_thd end ),prf.vll_avg) AS vll_avg_thd,
                ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value when  mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end ),prf.ry_volt) AS ry_volt,
                ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value when  mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end ),prf.yb_volt) AS yb_volt,
                ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value when  mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end ),prf.br_volt) AS br_volt,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value when  mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end ),prf.r_current) AS r_current,
                ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value when  mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end ),prf.y_current) AS y_current,
                ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value when  mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end ),prf.b_current) AS b_current,
                ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value when  mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end ),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value when  mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end ),prf.t_watts) AS t_watts,
                ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value when  mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end ),prf.r_watts) AS r_watts,
                ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value when  mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end ),prf.y_watts) AS y_watts,
                ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value when  mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end ),prf.b_watts) AS b_watts,
                ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value when  mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end ),prf.t_var) AS t_var,
                ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value when  mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end ),prf.r_var) AS r_var,
                ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value when  mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end ),prf.y_var) AS y_var,
                ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value when  mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end ),prf.b_var) AS b_var,
                ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value when  mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end ),prf.t_voltampere) AS t_voltampere,
                ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value when  mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end ),prf.r_voltampere) AS r_voltampere,
                ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value when  mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end ),prf.y_voltampere) AS y_voltampere,
                ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value when  mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end ),prf.b_voltampere) AS b_voltampere,
                ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value when  mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end ),prf.avg_powerfactor) AS avg_powerfactor,
                ROUND(AVG(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END ),prf.avg_powerfactor) AS pm_avg_powerfactor,

                ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value when  mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end ),prf.r_powerfactor) AS r_powerfactor,
                ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value when  mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end ),prf.y_powerfactor) AS y_powerfactor,
                ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value when  mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end ),prf.b_powerfactor) AS b_powerfactor,
                ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value when  mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end ),prf.powerfactor) AS powerfactor,
                
                ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value when  mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end ),prf.kvah) AS kvah,
                ROUND(SUM(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value when  mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end ),prf.kw) AS kw,
                ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value when  mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end ),prf.kvar) AS kvar,
                ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value when  mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end ),prf.power_factor) AS power_factor,
                ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value when  mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end ),prf.kva) AS kva,

                ROUND(AVG(CASE WHEN cp.frequency <> 0 THEN CASE  WHEN mmf.frequency = '*' THEN cp.frequency * mmf.frequency_value   WHEN mmf.frequency = '/' THEN cp.frequency / mmf.frequency_value ELSE cp.frequency END ELSE '' END), prf.frequency) AS frequency,

                cp.machine_status,
                cp.status,
                cp.created_on,
                cp.created_by,
                cp.modified_on,
                cp.modified_by,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end ),prf.machine_kwh) AS machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end ),prf.machine_kwh) AS master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kWh,
                
                ROUND(SUM(CASE WHEN mm.meter_type = 'Primary' THEN CASE WHEN mmf.kWh = '*' THEN cp.kWh * mmf.kWh_value WHEN  mmf.kWh = '/' THEN cp.kWh / mmf.kWh_value ELSE cp.kWh END ELSE 0 END ),prf.kWh) AS pm_kwh,
               
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS total_kWh,
                ROUND(MIN(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_min,
                ROUND(MAX(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS kwh_max,
                ROUND(AVG(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value when  mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end ),prf.kWh) AS avg_kWh,
                 '' as min_date,
                      '' as max_date,
                      '' as min_shift,
                      '' as max_shift,
                
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_machine_kWh / mmf.machine_kWh_value else cp.reverse_machine_kWh end ),prf.machine_kwh) AS reverse_machine_kWh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.reverse_master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.reverse_master_kwh / mmf.machine_kWh_value else cp.reverse_master_kwh end ),prf.machine_kwh) AS reverse_master_kwh,
                ROUND(SUM(case when mmf.kWh = '*' then cp.reverse_kwh * mmf.kWh_value when  mmf.kWh = '/' then cp.reverse_kwh / mmf.kWh_value else cp.reverse_kwh end ),prf.kWh) AS reverse_kwh,
                
                mm.ip_address,
                mm.address as slave_id,
                mm.port,
                mm.mac,
              
                ROUND(SUM(CASE WHEN cp.mill_shift = 1 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_1,
                ROUND(SUM(CASE WHEN cp.mill_shift = 2 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_2,
                ROUND(SUM(CASE WHEN cp.mill_shift = 3 THEN case when mmf.kWh = '*' then cp.kwh * mmf.kwh_value when  mmf.kwh = '/' then cp.kwh / mmf.kwh_value else cp.kwh end ELSE 0 END),prf.kWh) AS kwh_3,
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end  END),prf.machine_kwh) AS start_kwh_3,     
                ROUND(min(CASE WHEN cp.mill_shift = 1 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_1,
                ROUND(max(CASE WHEN cp.mill_shift = 2 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_2,
                ROUND(max(CASE WHEN cp.mill_shift = 3 THEN case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value when  mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end  END),prf.machine_kwh) AS end_kwh_3,
                
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN 'S' ELSE 'N' END AS nocom,
                CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) and cp.meter_status_code = 0 THEN 'Device Offline' ELSE mmc.meter_status_description END AS meter_status_description, 
                COUNT(DISTINCT CASE WHEN cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_s_count,
                COUNT( DISTINCT CASE WHEN cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS nocom_n_count,
                COUNT( DISTINCT CASE WHEN mm.meter_type = 'Primary' AND cp.date_time <= DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_s_count,
                COUNT(DISTINCT  CASE WHEN mm.meter_type = 'Primary' AND cp.date_time > DATE_SUB(NOW(), INTERVAL 5 MINUTE) THEN mm.meter_code END) AS pm_nocom_n_count,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS equipment_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh  ELSE 0 END),0) AS units,
                ROUND(SUM(CASE WHEN mm.meter = 'common' THEN cp.equipment_kwh ELSE 0 END),prf.kWh) AS common_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'and mm.meter_type = 'primary' THEN  cp.equipment_kwh ELSE 0 END),prf.kWh) AS pm_equipment_kwh,
                ifnull(Round(Round(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_kwh ELSE 0 END),0)/Round(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN  cp.actual_ton ELSE 0 END),0),0),0) units_per_ton,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh)) AS calculated_kwh,
                
                '' as tooltip_kwh,
                '' as formula,
                mm.source,
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.kva * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.kva / mmf.kva_value ELSE cp.kva END ELSE 0 END),prf.kva) AS demand,       
                IFNULL(ROUND(AVG(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.avg_powerfactor = '*' THEN ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value WHEN  mmf.avg_powerfactor = '/' THEN ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value ELSE ABS(cp.avg_powerfactor) END ELSE 0 END),prf.avg_powerfactor),0) AS dm_powerfactor,             
                ROUND(SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN CASE WHEN mmf.kva = '*' THEN cp.actual_demand * mmf.kva_value WHEN  mmf.kva = '/' THEN cp.actual_demand / mmf.kva_value ELSE cp.actual_demand END ELSE 0 END),prf.kva) AS actual_demand,            
		        MIN(CASE WHEN mm.main_demand_meter = 'yes' THEN cp.demand_dtm ELSE NULL END) AS d_date_time,
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_demand,  
                SUM(CASE WHEN mm.main_demand_meter = 'yes' THEN mm.max_demand else 0 end ) AS max_pf,  
                mm.meter,  
                mdl.model_name,
                mk.model_make_name,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment'AND mm.meter_type = 'primary' THEN cp.actual_ton else 0 end ),0) actual_ton,
                CONCAT(FLOOR(cp.runhour / 86400), ' days ',   SEC_TO_TIME(cp.runhour % 86400)) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.ry_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.ry_volt_thd / mmf.r_volt_thd_value else cp.ry_volt_thd end ),prf.r_volt_thd) AS ry_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.yb_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.yb_volt_thd / mmf.y_volt_thd_value else cp.yb_volt_thd end ),prf.y_volt_thd) AS yb_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.br_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.br_volt_thd / mmf.b_volt_thd_value else cp.br_volt_thd end ),prf.b_volt_thd) AS br_volt_thd,
                mm.is_poll_meter,
                
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.on_load_time ELSE 0 END))) AS on_load_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.idle_time ELSE 0 END))) AS idle_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time ELSE 0 END))) AS off_time,
                                concat(SEC_TO_TIME(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'  THEN cp.off_time+cp.on_load_time+cp.idle_time ELSE 0 END))) AS total_time,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes' THEN  cp.equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                                
                                
                md.campus_id AS group_id, 
                ''AS group_code,
                mcs.campus_name AS group_name                       
            FROM 
                ems_v1.current_power cp                       
                INNER JOIN ems_v1.master_meter mm ON mm.meter_id = cp.meter_id
                INNER JOIN ems_v1.master_company mc ON mm.company_id = mc.company_id
                INNER JOIN ems_v1.master_business_unit mb ON mm.bu_id = mb.bu_id
                INNER JOIN ems_v1.master_plant md ON mm.plant_id = md.plant_id
                INNER JOIN ems_v1.master_campus mcs ON mcs.campus_id = md.campus_id
                INNER JOIN ems_v1.master_plant_wise_department mpd ON mm.plant_department_id = mpd.plant_department_id
                INNER JOIN ems_v1.master_model mdl ON mdl.model_id = mm.model_name
                INNER JOIN ems_v1.master_model_make mk ON mk.model_make_id = mdl.model_make_id
                LEFT JOIN ems_v1.master_function mf ON  mm.function_id = mf.function_id
                LEFT JOIN ems_v1.master_converter_detail mcd ON mm.converter_id = mcd.converter_id 
                inner JOIN ems_v1.master_meter_factor mmf ON  mmf.plant_id = md.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = md.plant_id 
                left join master_meter_communication mmc on mmc.meter_status_code = cp.meter_status_code
                 
                        left join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id
                left JOIN ems_v1.master_equipment_group mmt ON me.equipment_group_id = mmt.equipment_group_id
                left JOIN ems_v1.master_equipment_class ecls ON me.equipment_class_id = ecls.equipment_class_id
                 Inner JOIN master_shifts ms 
                            ON
                                ms.company_id=mm.company_id AND 
                                ms.bu_id=mm.bu_id AND 
                                ms.plant_id=mm.plant_id AND 
                                ms.status='active' AND 
                                ms.mill_date=cp.mill_date AND 
                                  ms.mill_shift=cp.mill_shift  
                   
                                          
            WHERE  
                cp.status = '0' and mm.status = 'active' 
                 and mm.main_demand_meter = 'yes'                        
                group by   md.campus_id  
                order by   md.campus_id 
                
            
