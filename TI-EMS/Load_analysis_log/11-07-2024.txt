11/07/2024 09:42:13 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                    ems_v1.current_polling_data cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (7) and cp.meter_status in (2) and cp.mill_date = '2024-06-25 00:00:00' AND cp.mill_shift = '1'  
11/07/2024 09:48:29 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                    ems_v1.current_polling_data cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (5) and cp.meter_status in (2) and cp.mill_date = '2024-06-25 00:00:00' AND cp.mill_shift = '1'  
11/07/2024 09:52:00 load_analysis api query.. 
            SELECT *
            FROM (
                SELECT 
                (@row_number := @row_number + 1) AS slno,
			    mm.meter_code,
			    mm.meter_name,
                case when mm.is_poll_meter = 'yes' and mm.meter = 'equipment' then mm.meter_name else '' end as equipment_poll_meter_name,
			    cp.meter_id,
                DATE_FORMAT(cp.created_on, '%Y-%m-%dT%H:%i:%s') AS date_time,
			    cp.mill_date,
			    cp.mill_shift,
                me.equipment_code,
                me.equipment_name,
                me.equipment_id,
			    ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value  when mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value  when mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end),prf.r_current) AS r_current,
			    ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value  when mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end),prf.y_current) AS y_current,
			    ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value  when mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end),prf.b_current) AS b_current,
			    ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value  when mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end),prf.vll_avg) AS vll_avg,
			    ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value  when mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end),prf.ry_volt) AS ry_volt,
			    ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value  when mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end),prf.yb_volt) AS yb_volt,
			    ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value  when mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end),prf.br_volt) AS br_volt,
			    ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value  when mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end),prf.vln_avg) AS vln_avg,
			    ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value  when mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end),prf.r_volt) AS r_volt,
			    ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value  when mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end),prf.y_volt) AS y_volt,
			    ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value  when mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end),prf.b_volt) AS b_volt,
			    ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value  when mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end),prf.t_watts) AS t_watts,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value  when mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end),prf.kWh) AS kWh,
                
                   
			    ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value  when mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end),prf.kvah) AS kvah,
			    ROUND(AVG(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value  when mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end),prf.kw)  AS kw,
			    ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value  when mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end),prf.kvar) AS kvar,
			    ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value  when mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end),prf.power_factor) AS power_factor,
			    ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value  when mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end),prf.r_watts) AS r_watts,
			    ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value  when mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end),prf.kva) AS kva,
			    ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value  when mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end),prf.y_watts) AS y_watts,
			    ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value  when mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end),prf.b_watts) AS b_watts,
			    ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value  when mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end),prf.avg_powerfactor) AS avg_powerfactor,
			    ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value  when mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end),prf.r_powerfactor) AS r_powerfactor,
			    ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value  when mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end),prf.y_powerfactor) AS y_powerfactor,
			    ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value  when mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end),prf.b_powerfactor) AS b_powerfactor,
			    ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value  when mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end),prf.powerfactor) AS powerfactor,
			    ROUND(AVG(case when mmf.frequency = '*' then cp.frequency * mmf.frequency_value  when mmf.frequency = '/' then cp.frequency / mmf.frequency_value else cp.frequency end),prf.frequency) AS frequency,
			    ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value  when mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end),prf.t_voltampere) AS t_voltampere,
			    ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value  when mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end),prf.r_voltampere) AS r_voltampere,
			    ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value  when mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end),prf.y_voltampere) AS y_voltampere,
			    ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value  when mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end),prf.b_voltampere) AS b_voltampere,
			    ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value  when mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end),prf.t_var) AS t_var,
			    ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value  when mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end),prf.r_var) AS r_var,
			    ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value  when mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end),prf.y_var) AS y_var,
			    ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value  when mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end),prf.b_var) AS b_var,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end),prf.machine_kWh) AS master_kwh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end),prf.machine_kWh) AS machine_kWh,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh),prf.kWh) AS calculated_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                SUM(case when mmf.runhour = '*' then cp.runhour * mmf.runhour_value when  mmf.runhour = '/' then cp.runhour / mmf.runhour_value else cp.runhour end ) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,         
                '' as formula,
                '' as tooltip_kwh
		    from (
             SELECT @row_number:=0
            ) AS rn_init,
                ems_v1.current_power_analysis cp   

		        inner join ems_v1.master_meter mm on mm.meter_id=cp.meter_id
                inner join ems_v1.master_meter_factor mmf on  mmf.plant_id = mm.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = mm.plant_id  
                inner join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id 
                                
		    where 
                mm.status = 'active'  and mm.equipment_id in (5)  and cp.meter_status = '2'and cp.mill_date = '2024-06-25 00:00:00' and cp.mill_shift ='1'  and mm.is_poll_meter = 'yes' and mm.meter = 'equipment'  
            GROUP BY me.equipment_id, 
                cp.created_on
                ) AS subquery
            WHERE
                slno % 1 = 0
            
		    order by equipment_id, date_time                                
            
11/07/2024 09:52:21 load_analysis api query.. 
            SELECT *
            FROM (
                SELECT 
                (@row_number := @row_number + 1) AS slno,
			    mm.meter_code,
			    mm.meter_name,
                case when mm.is_poll_meter = 'yes' and mm.meter = 'equipment' then mm.meter_name else '' end as equipment_poll_meter_name,
			    cp.meter_id,
                DATE_FORMAT(cp.created_on, '%Y-%m-%dT%H:%i:%s') AS date_time,
			    cp.mill_date,
			    cp.mill_shift,
                me.equipment_code,
                me.equipment_name,
                me.equipment_id,
			    ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value  when mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value  when mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end),prf.r_current) AS r_current,
			    ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value  when mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end),prf.y_current) AS y_current,
			    ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value  when mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end),prf.b_current) AS b_current,
			    ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value  when mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end),prf.vll_avg) AS vll_avg,
			    ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value  when mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end),prf.ry_volt) AS ry_volt,
			    ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value  when mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end),prf.yb_volt) AS yb_volt,
			    ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value  when mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end),prf.br_volt) AS br_volt,
			    ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value  when mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end),prf.vln_avg) AS vln_avg,
			    ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value  when mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end),prf.r_volt) AS r_volt,
			    ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value  when mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end),prf.y_volt) AS y_volt,
			    ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value  when mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end),prf.b_volt) AS b_volt,
			    ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value  when mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end),prf.t_watts) AS t_watts,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value  when mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end),prf.kWh) AS kWh,
                
                   
			    ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value  when mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end),prf.kvah) AS kvah,
			    ROUND(AVG(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value  when mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end),prf.kw)  AS kw,
			    ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value  when mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end),prf.kvar) AS kvar,
			    ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value  when mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end),prf.power_factor) AS power_factor,
			    ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value  when mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end),prf.r_watts) AS r_watts,
			    ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value  when mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end),prf.kva) AS kva,
			    ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value  when mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end),prf.y_watts) AS y_watts,
			    ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value  when mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end),prf.b_watts) AS b_watts,
			    ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value  when mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end),prf.avg_powerfactor) AS avg_powerfactor,
			    ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value  when mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end),prf.r_powerfactor) AS r_powerfactor,
			    ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value  when mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end),prf.y_powerfactor) AS y_powerfactor,
			    ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value  when mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end),prf.b_powerfactor) AS b_powerfactor,
			    ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value  when mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end),prf.powerfactor) AS powerfactor,
			    ROUND(AVG(case when mmf.frequency = '*' then cp.frequency * mmf.frequency_value  when mmf.frequency = '/' then cp.frequency / mmf.frequency_value else cp.frequency end),prf.frequency) AS frequency,
			    ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value  when mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end),prf.t_voltampere) AS t_voltampere,
			    ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value  when mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end),prf.r_voltampere) AS r_voltampere,
			    ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value  when mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end),prf.y_voltampere) AS y_voltampere,
			    ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value  when mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end),prf.b_voltampere) AS b_voltampere,
			    ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value  when mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end),prf.t_var) AS t_var,
			    ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value  when mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end),prf.r_var) AS r_var,
			    ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value  when mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end),prf.y_var) AS y_var,
			    ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value  when mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end),prf.b_var) AS b_var,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end),prf.machine_kWh) AS master_kwh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end),prf.machine_kWh) AS machine_kWh,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh),prf.kWh) AS calculated_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                SUM(case when mmf.runhour = '*' then cp.runhour * mmf.runhour_value when  mmf.runhour = '/' then cp.runhour / mmf.runhour_value else cp.runhour end ) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,         
                '' as formula,
                '' as tooltip_kwh
		    from (
             SELECT @row_number:=0
            ) AS rn_init,
                ems_v1.current_power_analysis cp   

		        inner join ems_v1.master_meter mm on mm.meter_id=cp.meter_id
                inner join ems_v1.master_meter_factor mmf on  mmf.plant_id = mm.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = mm.plant_id  
                inner join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id 
                                
		    where 
                mm.status = 'active'  and mm.equipment_id in (7)  and cp.meter_status = '2'and cp.mill_date = '2024-06-25 00:00:00' and cp.mill_shift ='1'  and mm.is_poll_meter = 'yes' and mm.meter = 'equipment'  
            GROUP BY me.equipment_id, 
                cp.created_on
                ) AS subquery
            WHERE
                slno % 1 = 0
            
		    order by equipment_id, date_time                                
            
11/07/2024 09:56:01 load_analysis api query.. 
            SELECT *
            FROM (
                SELECT 
                (@row_number := @row_number + 1) AS slno,
			    mm.meter_code,
			    mm.meter_name,
                case when mm.is_poll_meter = 'yes' and mm.meter = 'equipment' then mm.meter_name else '' end as equipment_poll_meter_name,
			    cp.meter_id,
                DATE_FORMAT(cp.created_on, '%Y-%m-%dT%H:%i:%s') AS date_time,
			    cp.mill_date,
			    cp.mill_shift,
                me.equipment_code,
                me.equipment_name,
                me.equipment_id,
			    ROUND(AVG(case when mmf.t_current = '*' then cp.t_current * mmf.t_current_value  when mmf.t_current = '/' then cp.t_current / mmf.t_current_value else cp.t_current end),prf.t_current) AS t_current,
                ROUND(AVG(case when mmf.r_current = '*' then cp.r_current * mmf.r_current_value  when mmf.r_current = '/' then cp.r_current / mmf.r_current_value else cp.r_current end),prf.r_current) AS r_current,
			    ROUND(AVG(case when mmf.y_current = '*' then cp.y_current * mmf.y_current_value  when mmf.y_current = '/' then cp.y_current / mmf.y_current_value else cp.y_current end),prf.y_current) AS y_current,
			    ROUND(AVG(case when mmf.b_current = '*' then cp.b_current * mmf.b_current_value  when mmf.b_current = '/' then cp.b_current / mmf.b_current_value else cp.b_current end),prf.b_current) AS b_current,
			    ROUND(AVG(case when mmf.vll_avg = '*' then cp.vll_avg * mmf.vll_avg_value  when mmf.vll_avg = '/' then cp.vll_avg / mmf.vll_avg_value else cp.vll_avg end),prf.vll_avg) AS vll_avg,
			    ROUND(AVG(case when mmf.ry_volt = '*' then cp.ry_volt * mmf.ry_volt_value  when mmf.ry_volt = '/' then cp.ry_volt / mmf.ry_volt_value else cp.ry_volt end),prf.ry_volt) AS ry_volt,
			    ROUND(AVG(case when mmf.yb_volt = '*' then cp.yb_volt * mmf.yb_volt_value  when mmf.yb_volt = '/' then cp.yb_volt / mmf.yb_volt_value else cp.yb_volt end),prf.yb_volt) AS yb_volt,
			    ROUND(AVG(case when mmf.br_volt = '*' then cp.br_volt * mmf.br_volt_value  when mmf.br_volt = '/' then cp.br_volt / mmf.br_volt_value else cp.br_volt end),prf.br_volt) AS br_volt,
			    ROUND(AVG(case when mmf.vln_avg = '*' then cp.vln_avg * mmf.vln_avg_value  when mmf.vln_avg = '/' then cp.vln_avg / mmf.vln_avg_value else cp.vln_avg end),prf.vln_avg) AS vln_avg,
			    ROUND(AVG(case when mmf.r_volt = '*' then cp.r_volt * mmf.r_volt_value  when mmf.r_volt = '/' then cp.r_volt / mmf.r_volt_value else cp.r_volt end),prf.r_volt) AS r_volt,
			    ROUND(AVG(case when mmf.y_volt = '*' then cp.y_volt * mmf.y_volt_value  when mmf.y_volt = '/' then cp.y_volt / mmf.y_volt_value else cp.y_volt end),prf.y_volt) AS y_volt,
			    ROUND(AVG(case when mmf.b_volt = '*' then cp.b_volt * mmf.b_volt_value  when mmf.b_volt = '/' then cp.b_volt / mmf.b_volt_value else cp.b_volt end),prf.b_volt) AS b_volt,
			    ROUND(AVG(case when mmf.t_watts = '*' then cp.t_watts * mmf.t_watts_value  when mmf.t_watts = '/' then cp.t_watts / mmf.t_watts_value else cp.t_watts end),prf.t_watts) AS t_watts,
                ROUND(SUM(case when mmf.kWh = '*' then cp.kWh * mmf.kWh_value  when mmf.kWh = '/' then cp.kWh / mmf.kWh_value else cp.kWh end),prf.kWh) AS kWh,
                
                   
			    ROUND(AVG(case when mmf.kvah = '*' then cp.kvah * mmf.kvah_value  when mmf.kvah = '/' then cp.kvah / mmf.kvah_value else cp.kvah end),prf.kvah) AS kvah,
			    ROUND(AVG(case when mmf.kw = '*' then cp.t_watts * mmf.kw_value  when mmf.kw = '/' then cp.t_watts / mmf.kw_value else cp.t_watts end),prf.kw)  AS kw,
			    ROUND(AVG(case when mmf.kvar = '*' then cp.kvar * mmf.kvar_value  when mmf.kvar = '/' then cp.kvar / mmf.kvar_value else cp.kvar end),prf.kvar) AS kvar,
			    ROUND(AVG(case when mmf.power_factor = '*' then cp.power_factor * mmf.power_factor_value  when mmf.power_factor = '/' then cp.power_factor / mmf.power_factor_value else cp.power_factor end),prf.power_factor) AS power_factor,
			    ROUND(AVG(case when mmf.r_watts = '*' then cp.r_watts * mmf.r_watts_value  when mmf.r_watts = '/' then cp.r_watts / mmf.r_watts_value else cp.r_watts end),prf.r_watts) AS r_watts,
			    ROUND(AVG(case when mmf.kva = '*' then cp.kva * mmf.kva_value  when mmf.kva = '/' then cp.kva / mmf.kva_value else cp.kva end),prf.kva) AS kva,
			    ROUND(AVG(case when mmf.y_watts = '*' then cp.y_watts * mmf.y_watts_value  when mmf.y_watts = '/' then cp.y_watts / mmf.y_watts_value else cp.y_watts end),prf.y_watts) AS y_watts,
			    ROUND(AVG(case when mmf.b_watts = '*' then cp.b_watts * mmf.b_watts_value  when mmf.b_watts = '/' then cp.b_watts / mmf.b_watts_value else cp.b_watts end),prf.b_watts) AS b_watts,
			    ROUND(AVG(case when mmf.avg_powerfactor = '*' then ABS(cp.avg_powerfactor) * mmf.avg_powerfactor_value  when mmf.avg_powerfactor = '/' then ABS(cp.avg_powerfactor) / mmf.avg_powerfactor_value else ABS(cp.avg_powerfactor) end),prf.avg_powerfactor) AS avg_powerfactor,
			    ROUND(AVG(case when mmf.r_powerfactor = '*' then ABS(cp.r_powerfactor) * mmf.r_powerfactor_value  when mmf.r_powerfactor = '/' then ABS(cp.r_powerfactor) / mmf.r_powerfactor_value else ABS(cp.r_powerfactor) end),prf.r_powerfactor) AS r_powerfactor,
			    ROUND(AVG(case when mmf.y_powerfactor = '*' then ABS(cp.y_powerfactor) * mmf.y_powerfactor_value  when mmf.y_powerfactor = '/' then ABS(cp.y_powerfactor) / mmf.y_powerfactor_value else ABS(cp.y_powerfactor) end),prf.y_powerfactor) AS y_powerfactor,
			    ROUND(AVG(case when mmf.b_powerfactor = '*' then ABS(cp.b_powerfactor) * mmf.b_powerfactor_value  when mmf.b_powerfactor = '/' then ABS(cp.b_powerfactor) / mmf.b_powerfactor_value else ABS(cp.b_powerfactor) end),prf.b_powerfactor) AS b_powerfactor,
			    ROUND(AVG(case when mmf.powerfactor = '*' then ABS(cp.powerfactor) * mmf.powerfactor_value  when mmf.powerfactor = '/' then ABS(cp.powerfactor) / mmf.powerfactor_value else ABS(cp.powerfactor) end),prf.powerfactor) AS powerfactor,
			    ROUND(AVG(case when mmf.frequency = '*' then cp.frequency * mmf.frequency_value  when mmf.frequency = '/' then cp.frequency / mmf.frequency_value else cp.frequency end),prf.frequency) AS frequency,
			    ROUND(AVG(case when mmf.t_voltampere = '*' then cp.t_voltampere * mmf.t_voltampere_value  when mmf.t_voltampere = '/' then cp.t_voltampere / mmf.t_voltampere_value else cp.t_voltampere end),prf.t_voltampere) AS t_voltampere,
			    ROUND(AVG(case when mmf.r_voltampere = '*' then cp.r_voltampere * mmf.r_voltampere_value  when mmf.r_voltampere = '/' then cp.r_voltampere / mmf.r_voltampere_value else cp.r_voltampere end),prf.r_voltampere) AS r_voltampere,
			    ROUND(AVG(case when mmf.y_voltampere = '*' then cp.y_voltampere * mmf.y_voltampere_value  when mmf.y_voltampere = '/' then cp.y_voltampere / mmf.y_voltampere_value else cp.y_voltampere end),prf.y_voltampere) AS y_voltampere,
			    ROUND(AVG(case when mmf.b_voltampere = '*' then cp.b_voltampere * mmf.b_voltampere_value  when mmf.b_voltampere = '/' then cp.b_voltampere / mmf.b_voltampere_value else cp.b_voltampere end),prf.b_voltampere) AS b_voltampere,
			    ROUND(AVG(case when mmf.t_var = '*' then cp.t_var * mmf.t_var_value  when mmf.t_var = '/' then cp.t_var / mmf.t_var_value else cp.t_var end),prf.t_var) AS t_var,
			    ROUND(AVG(case when mmf.r_var = '*' then cp.r_var * mmf.r_var_value  when mmf.r_var = '/' then cp.r_var / mmf.r_var_value else cp.r_var end),prf.r_var) AS r_var,
			    ROUND(AVG(case when mmf.y_var = '*' then cp.y_var * mmf.y_var_value  when mmf.y_var = '/' then cp.y_var / mmf.y_var_value else cp.y_var end),prf.y_var) AS y_var,
			    ROUND(AVG(case when mmf.b_var = '*' then cp.b_var * mmf.b_var_value  when mmf.b_var = '/' then cp.b_var / mmf.b_var_value else cp.b_var end),prf.b_var) AS b_var,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.master_kwh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.master_kwh / mmf.machine_kWh_value else cp.master_kwh end),prf.machine_kWh) AS master_kwh,
                ROUND(SUM(case when mmf.machine_kWh = '*' then cp.machine_kWh * mmf.machine_kWh_value  when mmf.machine_kWh = '/' then cp.machine_kWh / mmf.machine_kWh_value else cp.machine_kWh end),prf.machine_kWh) AS machine_kWh,
                ROUND(SUM(CASE WHEN mm.meter = 'common' and mm.meter_type = 'primary' THEN  cp.equipment_kwh  ELSE 0 END),prf.kWh) AS pm_common_kwh,
                ROUND(SUM(cp.equipment_kwh),prf.kWh) AS calculated_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_on_load_kwh ELSE 0 END ),prf.kWh) as on_load_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_off_kwh  ELSE 0 END ),prf.kWh) as off_kwh,
                ROUND(SUM(CASE WHEN mm.meter = 'equipment' and mm.is_poll_meter = 'yes'THEN  cp.diff_equipment_idle_kwh ELSE 0 END ),prf.kWh) as idle_kwh,
                SUM(case when mmf.runhour = '*' then cp.runhour * mmf.runhour_value when  mmf.runhour = '/' then cp.runhour / mmf.runhour_value else cp.runhour end ) AS runhour,
                ROUND(AVG(case when mmf.r_volt_thd = '*' then cp.r_volt_thd * mmf.r_volt_thd_value when  mmf.r_volt_thd = '/' then cp.r_volt_thd / mmf.r_volt_thd_value else cp.r_volt_thd end ),prf.r_volt_thd) AS r_volt_thd,
                ROUND(AVG(case when mmf.y_volt_thd = '*' then cp.y_volt_thd * mmf.y_volt_thd_value when  mmf.y_volt_thd = '/' then cp.y_volt_thd / mmf.y_volt_thd_value else cp.y_volt_thd end ),prf.y_volt_thd) AS y_volt_thd,
                ROUND(AVG(case when mmf.b_volt_thd = '*' then cp.b_volt_thd * mmf.b_volt_thd_value when  mmf.b_volt_thd = '/' then cp.b_volt_thd / mmf.b_volt_thd_value else cp.b_volt_thd end ),prf.b_volt_thd) AS b_volt_thd,
                ROUND(AVG(case when mmf.avg_volt_thd = '*' then cp.avg_volt_thd * mmf.avg_volt_thd_value when  mmf.avg_volt_thd = '/' then cp.avg_volt_thd / mmf.avg_volt_thd_value else cp.avg_volt_thd end ),prf.avg_volt_thd) AS avg_volt_thd,
                ROUND(AVG(case when mmf.r_current_thd = '*' then cp.r_current_thd * mmf.r_current_thd_value when  mmf.r_current_thd = '/' then cp.r_current_thd / mmf.r_current_thd_value else cp.r_current_thd end ),prf.r_current_thd) AS r_current_thd,
                ROUND(AVG(case when mmf.y_current_thd = '*' then cp.y_current_thd * mmf.y_current_thd_value when  mmf.y_current_thd = '/' then cp.y_current_thd / mmf.y_current_thd_value else cp.y_current_thd end ),prf.y_current_thd) AS y_current_thd,
                ROUND(AVG(case when mmf.b_current_thd = '*' then cp.b_current_thd * mmf.b_current_thd_value when  mmf.b_current_thd = '/' then cp.b_current_thd / mmf.b_current_thd_value else cp.b_current_thd end ),prf.b_current_thd) AS b_current_thd,
                ROUND(AVG(case when mmf.avg_current_thd = '*' then cp.avg_current_thd * mmf.avg_current_thd_value when  mmf.avg_current_thd = '/' then cp.avg_current_thd / mmf.avg_current_thd_value else cp.avg_current_thd end ),prf.avg_current_thd) AS avg_current_thd,         
                '' as formula,
                '' as tooltip_kwh
		    from (
             SELECT @row_number:=0
            ) AS rn_init,
                ems_v1.current_power_analysis cp   

		        inner join ems_v1.master_meter mm on mm.meter_id=cp.meter_id
                inner join ems_v1.master_meter_factor mmf on  mmf.plant_id = mm.plant_id AND mmf.meter_id = mm.meter_id
                inner JOIN ems_v1.master_parameter_roundoff prf ON prf.plant_id = mm.plant_id  
                inner join ems_v1.master_equipment me on me.equipment_id = mm.equipment_id 
                                
		    where 
                mm.status = 'active'  and mm.equipment_id in (5)  and cp.meter_status = '2'and cp.mill_date = '2024-06-25 00:00:00' and cp.mill_shift ='1'  and mm.is_poll_meter = 'yes' and mm.meter = 'equipment'  
            GROUP BY me.equipment_id, 
                cp.created_on
                ) AS subquery
            WHERE
                slno % 1 = 0
            
		    order by equipment_id, date_time                                
            
11/07/2024 12:01:19 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                      ems_v1_completed.polling_data_062024 as cp  
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (3) and cp.meter_status in (2) and cp.mill_date = '2024-06-24 00:00:00'  
11/07/2024 12:03:29 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                    ( select meter_id,meter_status,mc_state_changed_time,mill_date,mill_shift,poll_duration,poll_consumption,equipment_consumption,avg_amps,min_amps,max_amps from ems_v1_completed.polling_data_072024 ) cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (313) and cp.meter_status in (2) and cp.mill_date  >= '2024-07-01 00:00:00' and cp.mill_date <= '2024-07-02 00:00:00'  
11/07/2024 12:57:44 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                      ems_v1_completed.polling_data_062024 as cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (7) and cp.meter_status in (1) and cp.mill_date = '2024-06-24 00:00:00' AND cp.mill_shift = '3'  
11/07/2024 12:58:09 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                      ems_v1_completed.polling_data_062024 as cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (7) and cp.meter_status in (1) and cp.mill_date = '2024-06-24 00:00:00' AND cp.mill_shift = '3'  
11/07/2024 13:00:39 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                    ( select meter_id,meter_status,mc_state_changed_time,mill_date,mill_shift,poll_duration,poll_consumption,equipment_consumption,avg_amps,min_amps,max_amps from ems_v1_completed.polling_data_072024 ) cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (313) and cp.meter_status in (2) and cp.mill_date  >= '2024-07-01 00:00:00' and cp.mill_date <= '2024-07-02 00:00:00'  
11/07/2024 13:02:29 polling analysis api query.. 
                select 
                    mm.equipment_id,
                    mm.meter_id,
                    me.equipment_code,
                    me.equipment_name,
                    mm.meter_code,
                    mm.meter_name,
                    cp.*,
                    concat(SEC_TO_TIME(cp.poll_duration)) as time_duration
                   
                from
                    ( select meter_id,meter_status,mc_state_changed_time,mill_date,mill_shift,poll_duration,poll_consumption,equipment_consumption,avg_amps,min_amps,max_amps from ems_v1_completed.polling_data_072024 ) cp 
                inner join master_meter mm on mm.meter_id = cp.meter_id
                inner join master_equipment me on me.equipment_id = mm.equipment_id
                where mm.status = 'active' and mm.is_poll_meter = 'yes'  and me.equipment_id in (313) and cp.meter_status in (2) and cp.mill_date  >= '2024-07-01 00:00:00' and cp.mill_date <= '2024-07-02 00:00:00'  
